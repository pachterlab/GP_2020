% 20th order Chebyshev approximation (Luke 1969, v2, p.105, table 4.1)
function [ei] = ei_cheb_gt8(z,varargin)
el=0.5772156649015328;
p = [1.081585183253608;...
	 0.089675166174404;...
	 0.009325711793980;...
	 0.001341474999410;...
	 0.000044487508106;...
	-0.000094412060877;...
	-0.000035536508652;...
	 0.000001376401560;...
	 0.000004703553094;...
	 0.000000478019500;...
	-0.000000645719093;...
	-0.000000103103516;...
	 0.000000106610083;...
	 0.000000013853456;...
	-0.000000020426935;...
	-0.000000000399461;...
	 0.000000004073797 ;...
	-0.000000000614592;...
	-0.000000000733329;...
	 0.000000000298349;...
	 0.000000000088133;...
    -0.000000000092197;...
	 0.000000000006840;...
	 0.000000000019820;...
	-0.000000000008394;...
    -0.000000000001913;...
	 0.000000000002849;...
	-0.000000000000634;...
	-0.000000000000485;...
	 0.000000000000377;...
	-0.000000000000037;...
	-0.000000000000087;...
	 0.000000000000051;...
	-0.000000000000001;...
	-0.000000000000014;...
	 0.000000000000008;...
	 0.000000000000000;...
	-0.000000000000002;...
	 0.000000000000001];
ei=zeros(size(z));
T_m = 0;
T_ = 0;
T = 0;
x = 2*(8./z)-1;

if isempty(varargin)
    ord = (length(p)-1);
else
    ord = varargin{1};
end
for i = 0:ord
    if i==0
        T=ones(size(z));
    elseif i==1
        T=x;
    else
        T=2*x.*T_-T_m;
    end
    ei = ei+p(i+1)*T;
    T_m = T_;
    T_ = T;
end

% e1 = e1 - el - log(z) ;
ei = ei./z.*exp(z);
% e1 = 
return